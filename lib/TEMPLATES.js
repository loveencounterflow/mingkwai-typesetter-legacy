// Generated by CoffeeScript 1.8.0
(function() {
  var MKTS, STYLUS, TEACUP, TRM, alert, as_css, badge, debug, help, info, log, name_, rpr, urge, warn, whisper;

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = '明快排字机/TEMPLATES';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  MKTS = require('./main');

  TEACUP = require('coffeenode-teacup');

  STYLUS = require('stylus');

  as_css = STYLUS.render.bind(STYLUS);

  for (name_ in TEACUP) {
    eval("" + name_ + " = TEACUP[ " + (rpr(name_)) + " ]");
  }

  this.layout = function() {
    return render((function(_this) {
      return function() {
        DOCTYPE(5);
        return HTML(function() {
          HEAD(function() {
            META({
              charset: 'utf-8'
            });
            TITLE('明快排字机');
            LINK({
              rel: 'shortcut icon',
              href: '/public/favicon.ico?v6'
            });
            return STYLE(as_css("body\n  font-family:        'Sun-ExtA'\n  font-size:          200%\n\n.this-col\n.this-row\n  background-color:   rgba(227, 166, 81, 0.2)\n\n.this-cell\n  background-color:   rgba(227, 166, 81, 0.6)\n  border:             3px solid red\n\n#json-display-doc\n#json-display-cells\n  border:             1px solid red"));
          });
          return BODY(function() {
            FORM("#controller", function() {
              BUTTON({
                name: 'record'
              }, '⏺');
              BUTTON({
                name: 'reset'
              }, '⏮');
              BUTTON({
                name: 'back'
              }, '⏴');
              BUTTON({
                name: 'pause'
              }, '⏸');
              BUTTON({
                name: 'play'
              }, '⏵');
              return BUTTON({
                name: 'next'
              }, '⏯');
            });
            BR();
            DIV("#doc-table", function() {
              return COMMENT('#{content}');
            });
            PRE("#json-display-doc", '');
            PRE("#json-display-cells", '');
            SCRIPT({
              src: 'http://code.jquery.com/jquery-1.11.1.js'
            });
            SCRIPT({
              src: '/socket.io/socket.io.js'
            });
            return COFFEESCRIPT(function() {
              var socket;
              log = console.log.bind(console);
              socket = io();
              return ($('document')).ready(function() {
                ($('button')).on('click', function() {
                  var event_name, event_type, self;
                  self = $(this);
                  event_type = 'playback';
                  event_name = self.attr('name');
                  socket.emit(event_type, event_name);
                  return false;
                });
                socket.on('new-table', function(table_html) {
                  return ($('#doc-table')).html(table_html);
                });
                socket.on('change', function(observee, action, target_txt, name, value) {
                  log(observee, target_txt);
                  switch (observee) {
                    case 'doc':
                      return ($('#json-display-doc')).text(target_txt, null, '  ');
                    case 'cells':
                      return ($('#json-display-cells')).text(JSON.stringify(value));
                  }
                });
                ($(window)).on('beforeunload', function() {
                  return socket.close;
                });
                log('ok.');
                return null;
              });
            });
          });
        });
      };
    })(this));
  };

  this.doc_table = function(doc) {
    return render((function(_this) {
      return function() {
        var x1, xc, y1, yc, _ref, _ref1;
        _ref = MKTS.get_next_xy(doc), x1 = _ref[0], y1 = _ref[1];
        _ref1 = MKTS.xy_from_idx(doc, doc['idx']), xc = _ref1[0], yc = _ref1[1];
        return TABLE({
          border: 1
        }, function() {
          var y, _i, _results;
          _results = [];
          for (y = _i = 0; 0 <= y1 ? _i <= y1 : _i >= y1; y = 0 <= y1 ? ++_i : --_i) {
            _results.push(TR(function() {
              var cell, clasz, x, _j, _ref2, _results1;
              _results1 = [];
              for (x = _j = 0, _ref2 = doc['cells_per_line']; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; x = 0 <= _ref2 ? ++_j : --_j) {
                cell = MKTS._get(doc, [x, y], void 0);
                cell = MKTS._rpr_cell(doc, cell);
                clasz = [];
                if (x === xc) {
                  clasz.push('.this-col');
                }
                if (y === yc) {
                  clasz.push('.this-row');
                }
                if (x === xc && y === yc) {
                  clasz.push('.this-cell');
                }
                _results1.push(TD(clasz.join(''), function() {
                  return cell;
                }));
              }
              return _results1;
            }));
          }
          return _results;
        });
      };
    })(this));
  };

}).call(this);
