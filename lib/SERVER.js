// Generated by CoffeeScript 1.8.0

/*
 *===========================================================================================================



 .d8888b.  8888888888 8888888b.  888     888 8888888888 8888888b.
d88P  Y88b 888        888   Y88b 888     888 888        888   Y88b
Y88b.      888        888    888 888     888 888        888    888
 "Y888b.   8888888    888   d88P Y88b   d88P 8888888    888   d88P
    "Y88b. 888        8888888P"   Y88b d88P  888        8888888P"
      "888 888        888 T88b     Y88o88P   888        888 T88b
Y88b  d88P 888        888  T88b     Y888P    888        888  T88b
 "Y8888P"  8888888888 888   T88b     Y8P     8888888888 888   T88b



 *===========================================================================================================
 */

(function() {
  var Htmlparser, MKTS, RMY, TEMPLATES, TEXT, TRM, TYPES, XNCHR, alert, app, badge, debug, get_doc_updater, help, info, layout, port, postscript, preamble, rpr, server, sio, update_doc, urge, warn, whisper, _ref;

  TEXT = require('coffeenode-text');

  TYPES = require('coffeenode-types');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = '明快排字机/SERVER';

  info = TRM.get_logger('info', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  urge = TRM.get_logger('urge', badge);

  whisper = TRM.get_logger('whisper', badge);

  help = TRM.get_logger('help', badge);

  RMY = require('remarkably');

  Htmlparser = (require('htmlparser2')).Parser;

  XNCHR = require('./XNCHR');

  MKTS = require('./main');

  TEMPLATES = require('./TEMPLATES');

  app = (require('express'))();

  server = (require('http')).Server(app);

  sio = (require('socket.io'))(server);

  port = 3000;

  layout = TEMPLATES.layout();

  _ref = layout.split('<!--#{content}-->'), preamble = _ref[0], postscript = _ref[1];

  get_doc_updater = function() {
    var chr_count, chr_idx, chrs, doc;
    chrs = XNCHR.chrs_from_text('畢昇發明(活字印刷術)宋沈括著夢溪筆談');
    chr_count = chrs.length;
    chr_idx = null;
    doc = null;
    return function(command, event_emitter) {
      var chr, done, handler;
      switch (command) {
        case 'new':
        case 'reset':
          handler = function(observee, action, target, name, value) {
            var target_txt;
            if (action !== 'get') {
              whisper([observee, action, target, name, value]);

              /* `JSON.stringify target` strangely causes an `illegal access` error: */
              target_txt = rpr(target);
              if (event_emitter != null) {
                event_emitter.emit('change', observee, action, target_txt, name, value);
              }
              return null;
            }
          };
          chr_idx = 0;
          doc = MKTS.new_observable_document(handler);
          break;
        case 'next':
          done = false;
          while (!done) {
            chr = chrs[chr_idx % chr_count];
            chr_idx += 1;
            debug('©0g1', chr);
            switch (chr) {
              case '(':
                MKTS.set_size(doc, 2);
                MKTS.advance_chr_if_necessary(doc, true);
                done = false;
                break;
              case ')':
                MKTS.set_size(doc, 1);
                MKTS.advance_chr_if_necessary(doc, true);
                done = false;
                break;
              default:
                MKTS.put(doc, chr);
                done = true;
            }
          }
          break;
        default:
          warn("ignored MKTS command: " + command);
      }
      return doc;
    };
  };

  update_doc = get_doc_updater();

  sio.on('connection', function(socket) {
    var doc, render;
    doc = null;
    urge("a user connected");
    socket.on('disconnect', function() {
      return warn('user disconnected');
    });
    socket.on('playback', function(command) {
      switch (command) {
        case 'next':
          return render(command);
        case 'reset':
          return render(command);
        default:
          return warn("ignored event: playback/" + command);
      }
    });
    render = function(command) {
      if (doc == null) {
        doc = update_doc('new', socket);
      }
      doc = update_doc(command);
      return sio.emit('new-table', TEMPLATES.doc_table(doc));
    };
    render();
    return null;
  });

  app.get('/', (function(_this) {
    return function() {
      return function(request, response) {
        response.writeHead(200, {
          'Access-Control-Allow-Origin': '*'
        });
        response.write(preamble);
        response.write(postscript);
        return response.end();
      };
    };
  })(this)());

  this.serve = function() {
    return server = server.listen(port, function() {
      var host, _ref1;
      _ref1 = server.address(), host = _ref1.address, port = _ref1.port;
      return help("明快排字机 listening at http://" + host + ":" + port);
    });
  };

  if (module.parent == null) {
    this.serve();
  }

}).call(this);
