// Generated by CoffeeScript 1.8.0
(function() {
  var Htmlparser, P1, RMY, TEXT, TRM, TYPES, XNCHR, alert, badge, debug, echo, help, info, njs_fs, njs_path, rpr, urge, verbose, warn, whisper,
    __modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  njs_path = require('path');

  njs_fs = require('fs');

  TEXT = require('coffeenode-text');

  TYPES = require('coffeenode-types');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'TYPESETTER';

  info = TRM.get_logger('info', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  urge = TRM.get_logger('urge', badge);

  whisper = TRM.get_logger('whisper', badge);

  help = TRM.get_logger('help', badge);

  echo = TRM.echo.bind(TRM);

  RMY = require('remarkably');

  Htmlparser = (require('htmlparser2')).Parser;

  XNCHR = require('./XNCHR');

  P1 = require('pipedreams');

  verbose = true;

  verbose = false;

  this.new_document = function(settings) {
    var R;
    R = {
      keep_x_grid: false,
      cells: [],
      cells_per_line: 8,
      lines_per_page: 6,
      idx: 0,
      size: 1,
      auto_space_chr: '＊',
      block_space_chr: '＃'
    };
    return R;
  };

  this.new_observable_document = function(settings, handler) {
    var R, arity, get_observer, _ref;
    require('harmony-reflect');
    switch (arity = arguments.length) {
      case 1:
        _ref = [null, settings], settings = _ref[0], handler = _ref[1];
        break;
      case 2:
        null;
        break;
      default:
        throw new Error("expect 2 arguments, got " + arity);
    }
    get_observer = function(observee_name) {
      var S;
      S = {
        get: function(target, name) {
          handler(observee_name, 'get', target, name);
          return target[name];
        },
        set: function(target, name, value) {
          handler(observee_name, 'set', target, name, value);
          return target[name] = value;
        }
      };
      return S;
    };
    R = this.new_document(settings);
    R['cells'] = Proxy(R['cells'], get_observer('cells'));
    return Proxy(R, get_observer('doc'));
  };

  this._get = function(me, pos, fallback) {
    var R, idx;
    idx = this.idx_from_pos(me, pos);
    R = me['cells'][idx];
    if (R === void 0) {
      if (arguments.length > 2) {
        return fallback;
      }
      throw new Error("position " + (this._rpr_pos(me, pos)) + " out of bounds");
    }
    return R;
  };

  this._set = function(me, pos, content) {
    var idx, size, xy;
    idx = this.idx_from_pos(me, pos);
    xy = this.xy_from_pos(me, pos);
    size = me.size;
    this._validate_xy(me, xy, size);
    me['cells'][idx] = content;
    return me;
  };

  this.put = function(me, content) {

    /* TAINT `put` doesn't honor `size` */
    var block_space_chr, cells, dx, dy, idx, size, x0, y0, _i, _j, _ref;
    idx = me.idx, size = me.size, cells = me.cells, block_space_chr = me.block_space_chr;
    _ref = this._get_xy(me), x0 = _ref[0], y0 = _ref[1];
    this._set(me, idx, content);
    for (dx = _i = 0; 0 <= size ? _i < size : _i > size; dx = 0 <= size ? ++_i : --_i) {
      for (dy = _j = 0; 0 <= size ? _j < size : _j > size; dy = 0 <= size ? ++_j : --_j) {
        if ((dx === dy && dy === 0)) {
          continue;
        }
        cells[this.idx_from_xy(me, [x0 + dx, y0 + dy])] = block_space_chr;
      }
    }
    return this.advance_chr(me);
  };

  this.advance_chr = function(me) {
    var cell_is_free, cells, enough_free_cells, on_grid_line, size;
    size = me.size, cells = me.cells;

    /* If character size is 1, we can simply advance to the next cell. Since it is not allowed to
      retroactively change cell contents, this should always put on a free cell.
     */
    if (size === 1) {
      while (true) {
        me['idx'] += 1;
        cell_is_free = cells[me['idx']] === void 0;
        if (cell_is_free) {
          break;
        }
      }
      return me;
    }

    /* If character size `s` is greater than 1, we must advance to a position on a line that has both an
      integer multiple of `s` free cells left and that is a multiple integer (including 0) of `s` lines from
      the top. We go step by step, filling up blank cells with `auto_space_chr`.
     */
    while (true) {
      me['idx'] += 1;
      enough_free_cells = (this._get_remaining_line_length(me)) >= 1;
      on_grid_line = (__modulo(this._get_y(me), size)) === 0;
      cell_is_free = cells[me['idx']] === void 0;
      if (enough_free_cells && on_grid_line && cell_is_free) {
        break;
      }
      me['cells'].push(me['auto_space_chr']);
    }
    return me;
  };

  this.advance_chr_if_necessary = function(me) {

    /* Like `advance_chr`, but assuming that an advance has just been taken place and we have too look
      whther the new position is suitable for a character of (a new) `size`.
     */
    var cell_is_free, cells, enough_free_cells, on_grid_line, size;
    size = me.size, cells = me.cells;

    /* If character size is 1, we can simply stay where we are. */
    if (size === 1) {
      while (true) {
        cell_is_free = cells[me['idx']] === void 0;
        if (cell_is_free) {
          break;
        }
        me['idx'] += 1;
      }
      return me;
    }

    /* If character size `s` is greater than 1, we must advance to a position on a line that has both an
      integer multiple of `s` free cells left and that is a multiple integer (including 0) of `s` lines from
      the top. We go step by step, filling up blank cells with `auto_space_chr`.
     */
    while (true) {
      enough_free_cells = (this._get_remaining_line_length(me)) >= 1;
      on_grid_line = (__modulo(this._get_y(me), size)) === 0;
      cell_is_free = cells[me['idx']] === void 0;
      if (enough_free_cells && on_grid_line && cell_is_free) {
        break;
      }
      me['cells'].push(me['auto_space_chr']);
      me['idx'] += 1;
    }
    return me;
  };


  /*
   *===========================================================================================================
  
  
  
   .d8888b.   .d88888b.  888b     d888 8888888b.  8888888b.  8888888888  .d8888b.   .d8888b.
  d88P  Y88b d88P" "Y88b 8888b   d8888 888   Y88b 888   Y88b 888        d88P  Y88b d88P  Y88b
  888    888 888     888 88888b.d88888 888    888 888    888 888        Y88b.      Y88b.
  888        888     888 888Y88888P888 888   d88P 888   d88P 8888888     "Y888b.    "Y888b.
  888        888     888 888 Y888P 888 8888888P"  8888888P"  888            "Y88b.     "Y88b.
  888    888 888     888 888  Y8P  888 888        888 T88b   888              "888       "888
  Y88b  d88P Y88b. .d88P 888   "   888 888        888  T88b  888        Y88b  d88P Y88b  d88P
   "Y8888P"   "Y88888P"  888       888 888        888   T88b 8888888888  "Y8888P"   "Y8888P"
  
  
   *===========================================================================================================
   */

  this.set_size = function(me, size) {
    if (size !== 1 && size !== 2 && size !== 3 && size !== 4) {
      throw new Error("unsupported size " + (rpr(size)));
    }
    me['size'] = size;
    return me;
  };

  this.compress = function(me) {
    var idx, size, y, y0, y1, _, _ref, _ref1;
    size = me.size, idx = me.idx;
    if (!(size > 1)) {
      throw new Error("unsupported size " + (rpr(size)) + " for compress");
    }
    _ref = this.xy_from_idx(me, idx), _ = _ref[0], y = _ref[1];
    _ref1 = this._get_grid_line_ys(me, y, size), y0 = _ref1[0], y1 = _ref1[1];
    debug("compressing lines " + y0 + " .. " + y1);
    return me;
  };


  /*
   *===========================================================================================================
  
  
  
   .d8888b.   .d88888b.   .d88888b.  8888888b.  8888888b.  8888888 888b    888        d8888 88888888888 8888888888  .d8888b.
  d88P  Y88b d88P" "Y88b d88P" "Y88b 888   Y88b 888  "Y88b   888   8888b   888       d88888     888     888        d88P  Y88b
  888    888 888     888 888     888 888    888 888    888   888   88888b  888      d88P888     888     888        Y88b.
  888        888     888 888     888 888   d88P 888    888   888   888Y88b 888     d88P 888     888     8888888     "Y888b.
  888        888     888 888     888 8888888P"  888    888   888   888 Y88b888    d88P  888     888     888            "Y88b.
  888    888 888     888 888     888 888 T88b   888    888   888   888  Y88888   d88P   888     888     888              "888
  Y88b  d88P Y88b. .d88P Y88b. .d88P 888  T88b  888  .d88P   888   888   Y8888  d8888888888     888     888        Y88b  d88P
   "Y8888P"   "Y88888P"   "Y88888P"  888   T88b 8888888P"  8888888 888    Y888 d88P     888     888     8888888888  "Y8888P"
  
  
  
   *===========================================================================================================
   */

  this.idx_from_xy = function(me, xy, allow_wrap) {
    var cells_per_line, lines_per_page, x, y;
    if (allow_wrap == null) {
      allow_wrap = false;
    }
    if (allow_wrap) {
      throw new Error("wrapping not implemented");
    }
    cells_per_line = me.cells_per_line, lines_per_page = me.lines_per_page;
    x = xy[0], y = xy[1];
    if (!(x < cells_per_line)) {
      throw Error("illegal x " + (rpr(x)));
    }
    return y * cells_per_line + x;
  };

  this.xy_from_idx = function(me, idx) {
    var cells_per_line, lines_per_page;
    cells_per_line = me.cells_per_line, lines_per_page = me.lines_per_page;
    return [__modulo(idx, cells_per_line), Math.floor(idx / cells_per_line)];
  };

  this.idx_from_pos = function(me, pos) {
    if (TYPES.isa_number(pos)) {
      return pos;
    }
    return this.idx_from_xy(me, pos);
  };

  this.xy_from_pos = function(me, pos) {
    if (TYPES.isa_list(pos)) {
      return pos;
    }
    return this.xy_from_idx(me, pos);
  };

  this.get_next_idx = function(me) {
    return me['cells'].length;
  };

  this.get_next_xy = function(me, pos) {
    return this.xy_from_idx(me, this.get_next_idx(me));
  };

  this._validate_xy = function(me, xy, size) {
    var keep_x_grid, old_content, x, y;
    keep_x_grid = me.keep_x_grid;
    x = xy[0], y = xy[1];
    if (keep_x_grid && size > 1) {
      if (__modulo(x, size) !== 0) {
        throw new Error("" + (this._rpr_xy(me, xy)) + " not within x grid size " + size);
      }
    }
    if (__modulo(y, size) !== 0) {
      throw new Error("" + (this._rpr_xy(me, xy)) + " not within y grid size " + size);
    }
    old_content = me['cells'][this.idx_from_xy(me, xy)];
    if (old_content !== void 0) {
      throw new Error("cannot overwrite " + (this._rpr_xy(me, xy)) + " " + (rpr(old_content)));
    }
    return me;
  };

  this._rpr_pos = function(me, pos) {
    if (TYPES.isa_number(pos)) {
      return this._rpr_idx(me, pos);
    } else {
      return this._rpr_xy(me, pos);
    }
  };

  this._rpr_xy = function(me, xy) {
    return "@( " + xy[0] + ", " + xy[1] + " )";
  };

  this._rpr_idx = function(me, idx) {
    return this._rpr_xy(me, this.xy_from_pos(me, idx));
  };

  this._get_idx = function(me) {
    return me['idx'];
  };

  this._get_xy = function(me) {
    return this.xy_from_idx(me, me['idx']);
  };

  this._get_x = function(me) {
    return (this._get_xy(me))[0];
  };

  this._get_y = function(me) {
    return (this._get_xy(me))[1];
  };


  /*
   *===========================================================================================================
  
  
  
  888    888 8888888888 888      8888888b.  8888888888 8888888b.   .d8888b.
  888    888 888        888      888   Y88b 888        888   Y88b d88P  Y88b
  888    888 888        888      888    888 888        888    888 Y88b.
  8888888888 8888888    888      888   d88P 8888888    888   d88P  "Y888b.
  888    888 888        888      8888888P"  888        8888888P"      "Y88b.
  888    888 888        888      888        888        888 T88b         "888
  888    888 888        888      888        888        888  T88b  Y88b  d88P
  888    888 8888888888 88888888 888        8888888888 888   T88b  "Y8888P"
  
  
  
   *===========================================================================================================
   */

  this._get_grid_line_ys = function(me, n, module) {
    var y0;
    y0 = (Math.floor(n / module)) * module;
    return [y0, y0 + module - 1];
  };

  this._rpr_cell = function(me, cell) {
    if (cell === void 0) {
      return '〇';
    }
    if (cell === null) {
      return '〼';
    }
    if (TYPES.isa_text(cell)) {
      return cell;
    }
    return rpr(cell);
  };

  this._get_remaining_line_length = function(me) {
    return Math.floor((me['cells_per_line'] - this._get_x(me)) / me['size']);
  };

  if (module.parent == null) {
    this.serve();
  }

}).call(this);
